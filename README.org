#+title: Jupyter Notebook Docker Image

* Instructions
The docker image can either be pulled from the GitHub container registry, or built locally after cloning this repository.
** Pulling from GHCR
The docker image can be pulled GHCR using the following command. Where =[ARCHITECTURE]= is your computers architecture, if running on a Mac with apple silicon (M1, M2, M3) this would be =arm64= if running on any other platform this would be =amd64=.
#+begin_src bash
  docker pull ghcr.io/lucas-kelley/ece-c147-jupyter:[ARCHITECTURE]
  # e.g. for Mac (Apple silicon)
  docker pull ghcr.io/lucas-kelley/ece-c147-jupyter:arm64
#+end_src
- NOTE: if you do not specify a tag when pulling the image it will default to the tag =latest= which is equivalent to =arm64= meaning the arm version of the image will be pulled.


** Build locally
It can also be built locally (if that's more your speed) from within the repository directory using the following command.
#+begin_src bash
  docker build -f Dockerfile --tag [IMAGE_NAME] .
#+end_src


** Usage
After either building or pulling the docker image to run a Jupyter notebook and access it from your local machine I have outlined the following steps.
1) Run the docker image with the directory where the notebook is located mounted to =/notebook= within the container and open the port =8888= into the container.
   
   e.g.
   #+begin_src bash
     docker run --rm -itdp 8888:8888 --name '[CONTAINER_NAME]' -v [DIR_PATH]:/notebook [IMAGE_NAME] '[PASSWORD]'
   #+end_src
   Where:
   - =[CONTAINER_NAME]= is the name of your container
   - =[DIR_PATH]= is the path to the directory where the Jupyter notebook is located
   - =[IMAGE_NAME]= is the name of the docker image to run, which would be =ghcr.io/lucas-kelley/ece-c147-jupyter= if pulled.
   - =[PASSWORD]= is the password for the Jupyter notebook once it is running
2) Open the Jupyter notebook by navigating to the URL [[http://localhost:8888/]] within your browser.
3) Enter the password where prompted as =[PASSWORD]=, if you put the password as an empty string you will not be prompted to enter one.
4) To stop the Jupyter container run the following command within your terminal.
   #+begin_src bash
     docker stop '[CONTAINER_NAME]'
   #+end_src


** Fix for homework 5
In order to get homework 5 to properly work, make sure to download the fixed [[https://piazza.com/redirect/s3?bucket=uploads&prefix=paste%2Fktz5qi1wsal4y2%2F9c4d1bfcdaf233ffb2b6e61c155ce229f426b0107fd66980b3bff4b057445c68%2Fim2col_cython.pyx][=im2col_cython.pyx=]] (credit to Mauricio on [[https://piazza.com/class/lr6plmihzvi3ep/post/804][Piazza 804]]) and replace the one downloaded with homework 5.
To run the setup command you have to execute it within the container so that it gets built for the containers architecture.
This is done by running the following command with the container running and the homework 5 notebook directory mounted.
#+begin_src bash
  docker exec -it ece bash -c "cd [relative/path/to/utils]; python3 setup.py build_ext --inplace"
  # for example if you have the HW5_code directory mounted then just
  # copy paste the following command after replacing the im2col_cython.pyx file in utils
  docker exec -it ece bash -c "cd utils; python3 setup.py build_ext --inplace"
#+end_src


* Dockerfile Overview
The Dockerfile base image is ubuntu:22.04 because why the fuck not.
#+begin_src docker :tangle "Dockerfile"
  FROM ubuntu:22.04
#+end_src

We then setup the timezone information to avoid being prompted when installing packages and install the packages.
#+begin_src docker :tangle "Dockerfile"
  RUN ln -snf /usr/share/zoneinfo/$CONTAINER_TIMEZONE /etc/localtime && echo $CONTAINER_TIMEZONE > /etc/timezone
  RUN apt update && apt install -y python3 python3-pip pandoc texlive-xetex
#+end_src

After that the requirements specified for ece c147 Jupyter notebooks are installed.
#+begin_src docker :tangle "Dockerfile"
  COPY requirements.txt /src/pip_reqs/
  RUN python3 -m pip install -r /src/pip_reqs/requirements.txt
#+end_src

Then we add the default user =anon= and copy the entrypoint script along with the notebooks into the image.
#+begin_src docker :tangle "Dockerfile"
  RUN useradd -ms /bin/bash anon
  COPY --chown=anon entrypoint.sh /run/
  COPY --chown=anon notebooks /src/notebooks
  USER anon
#+end_src

Finally the working directory gets set as =/notebook= and the entrypoint is set as the =entrypoint.sh= script.
#+begin_src docker :tangle "Dockerfile"
  WORKDIR /notebooks
  ENTRYPOINT ["/run/entrypoint.sh"]
#+end_src
